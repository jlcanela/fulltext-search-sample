
import caliban.Http4sAdapter

import cats.data.Kleisli
import org.http4s.StaticFile
import org.http4s.implicits._
import org.http4s.server.Router
import org.http4s.blaze.server.BlazeServerBuilder
import org.http4s.server.middleware.CORS
import zio._
import zio.interop.catz._
import scala.concurrent.ExecutionContext
import caliban.CalibanError
import cats.effect.kernel.Async
/*
object ExampleApp extends App {
  
  type R = ZEnv with Has[
        ElasticService.ElasticService
      ] with Has[LogService.LogService]

  type F[A] = RIO[R, A]
 // type F[A] = RIO[zio.console.Console with zio.clock.Clock with zio.Has[LogService.LogService], A]
// type T[A] = ZIO[zio.console.Console with zio.clock.Clock with zio.Has[LogService.LogService], Throwable, A]
  def layer
      : ZLayer[Any, Nothing, R] =
    (ZEnv.live >+> ElasticService.make >+> LogService.make).orDie

 // implicit val f : Async[F] = implicitly[Async[F]]

  override def run(args: List[String]): ZIO[ZEnv, Nothing, ExitCode] =
    ZIO
      .runtime[R]
      .flatMap(implicit runtime =>
        for {
          interpreter <- LogApi.api.interpreter
          _           <- BlazeServerBuilder[F]
                           .bindHttp(8088, "0.0.0.0")
                           .withHttpWebSocketApp(builder =>
                             Router[F](
                               "/api/graphql" -> CORS.policy(Http4sAdapter.makeHttpService(interpreter)),
                               "/ws/graphql"  -> CORS.policy(Http4sAdapter.makeWebSocketService(builder, interpreter)),
                               "/graphiql"    -> Kleisli.liftF(StaticFile.fromResource("/graphiql.html", None))
                             ).orNotFound
                           )
                           .resource
                           .toManagedZIO
                           .useForever
        } yield ()
      )
      .provideCustomLayer(layer)
      .exitCode
}
*/